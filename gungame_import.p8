pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
-- main functions

-------------------- game states
game_over = false
game_state="tut"
-- states are
-- tut
-- started
-- over

--------------------- main loops

function _init()
	-- init music
	music(0)
end

function _update()
	if game_state == "over" then
		return 0	
	end
	--time 
	clock_update()
	-- update objects
	player_update()
	bullet_update()
	enemy_update()
	power_up_update()
	shake_update()
	emitters_update()
	bomb_update();
	tutorial_update()
	ramp_diff_update()
	score_update()
	-- process collisions
	bullet_cull()
	enemy_coll_backs()
	power_up_collbacks()
end

function _draw()
	if game_state=="over" then
		game_over_draw()
		return null
	end
	-- cls
	cls(0)
	-- draw map
	map()
	camera(
		player.pos.x-64+8+shake_offs.x,
		player.pos.y-64+8+shake_offs.y
	)
	-- draw game objects
	bomb_draw()
	player_draw()
	bullet_draw()
	enemies_draw()
	power_up_draw()
	emitters_draw()
	tutorial_draw()
	--ui
	ui_player_health()
	ui_player_bomb()
	dr_score()
	-- logging
	log_draw()
	--arc(player.pos.x,player.pos.y,8,0,0.5,7)
end













---------------------- collision
function collide(o, flag)
	local x1=o.pos.x/8
	local y1=o.pos.y/8
	local x2=(o.pos.x+7)/8
	local y2=(o.pos.y+7)/8
	
	local a = fget(mget(x1,y1),flag)
	local b = fget(mget(x1,y2),flag)
	local c = fget(mget(x2,y2),flag)
	local d = fget(mget(x2,y1),flag)
	
	if a or b or c or d then
		return true
	else
		return false
	end
end


function obj_collide(obj, other)
 if
  other.pos.x + 8 + 8 > obj.pos.x+8 and 
  other.pos.y +8 + 8 > obj.pos.y+8 and
  other.pos.x +8 < obj.pos.x+8+8 and
  other.pos.y +8 < obj.pos.y+8+8 
 then
  return true
 end
end







-------------------- clock stuff
clock={
	delta=0,
	prev_time=0
}
function clock_update()
	-- calculate delta time
	clock.delta = time() - clock.prev_time
	--  current time
	clock.prev_time=time()
end









------------------------ logging
logging = true
logging_size = 8
log_msgs={}
function log(msg) 
	log_msgs[#log_msgs+1] = msg
end
function log_draw()
	if logging == true then;
		if #log_msgs > 0 then
			for i=1, #log_msgs do
				print(
				log_msgs[#log_msgs-(i-1)],
				player.pos.x-64+8,
				(player.pos.y+64+3)-(8*logging_size)+(i*8)
				)
			end
		end
	end
end









----------------- math utilities
pi = 22/7

function rot_vec(vec, ang)
	local x=vec.x
	local y=vec.y
	local sina = sin(ang)
	local cosa = cos(ang)
	return {
		x=(x*cosa)-(y*sina),
		y=(x*sina)+(y*cosa)
	}
end

function deg2rad(deg)
	return deg * (pi/180)
end

function rad2deg(rad)
	return rad * (180/pi)
end

function norm_vec(vector)
 local length = sqrt(vector.x^2 + vector.y^2)
 local res = {x=0, y=0}
 if length > 0 then
  res.x = vector.x / length
  res.y = vector.y / length
 end
 return res
end

function rnd_vec(mag)
	local pos = {
		x=((rnd()*2)-1)*(mag*8),
		y=((rnd()*2)-1)*(mag*8)
	}
	return pos
end

function lerp(a, b, t)
 return a + (b - a) * t
end


--------------- random utilities
function is_pos_outside(pos)
	-- check x
	local x_outside = false
	if pos.x < (74*8)+8 or pos.x > 107*8 then
		x_outside = true
	end 
	-- check y
	local y_outside = false 
	if pos.y > (42*8) or pos.y < (14*8)+8 then
		x_outside = true
	end
	return x_outside or y_outside
end

--74-42
--121-21

function spn_in_box()
	local pos = {
	 x=42+(rnd(74-42)),
	 y=21+(rnd(121-21))
	}
	return pos
end

-- creates a 
--random spawn point
--around player
-- in level box 
-- or around player
function get_spn_pos()
	local max_tries = 10
	local tries = 0
	local pos = {x=0,y=0}
	while 
		tries < max_tries and
		is_pos_outside(pos) do
			tries += 1
			pos = rnd_vec(5)
			pos.x += player.pos.x
			pos.y += player.pos.y
	end	
	if tries >= max_tries then
		pos = spn_in_box()
	end
	return pos
end


------------- difficulty ramping
ramp_diff_time = 10 
function ramp_diff_update()
	if game_state == "started" then
		if ramp_diff_time > 0 then
			ramp_diff_time -= clock.delta
		else
			ramp_diff_time = 10
			log("ramp")
			-- add more enemies
			add_enemy_instance(false)
			-- increase enemy speed
			enemy_spd*=1.1
			-- decrease power up timer
			p_spn_rate*=0.8
		end
	end
end
-->8
-- player stuff
-- player var
player={
	-- vars
	speed=2,
	sprite=71,
	-- states
	pos={x=91*8,y=60*8},
	health=3,
	dir=0,
	is_hit=false,
	sht_fwd=true,
	sht_dir={},
	bombs=0
}

function player_update()
	-- movement and reticle
	local o_pos = {x=player.pos.x, y=player.pos.y}
	if btn(0) then
		player.pos.x -= player.speed
		player.dir = 0
	elseif btn(1) then
		player.pos.x += player.speed
		player.dir = 1
	end
	if btn(2) then
		player.pos.y -= player.speed
		player.dir = 2
	elseif btn(3) then
		player.pos.y += player.speed
		player.dir = 3
	end
	-- collision env
	if collide(player, 0) then
		player.pos = o_pos
	end
	-- collision enemy
	for i=1, #enemies do
		if obj_collide(player, enemies[i]) and enemies[i].active then
			player_damage()
		end
	end
	-- shooting
	if btn(4) then
		if b_down_time < 0 then
			--iterate tutorial
			iter_tut_prompt(2)
			-- handle bullet down time
			b_down_time = b_rate
			-- calc bullet directions
			local b_dir = rot_vec(player.sht_dir, curr_ret_ang)
			local b_dir_a = rot_vec(b_dir, deg2rad(2))
			local b_dir_b = rot_vec(b_dir, deg2rad(-2))
			-- create the bullets
			create_bullet(player.pos.x, player.pos.y, b_dir)
			create_bullet(player.pos.x, player.pos.y, b_dir_a)
			create_bullet(player.pos.x, player.pos.y, b_dir_b)
			sfx(5)
			end
	end
	-- switch shooting direction
	if btnp(5) then
		--iterate tut
		iter_tut_prompt(3)
		--switch direciton
		if player.sht_fwd then
			player.sht_fwd = false
			ret_ang = 0.5
		else
			player.sht_fwd = true
			ret_ang = 0
		end
	end
	-- bomb use
	if(btnp(4) and btnp(5)) then
		create_bomb(player.pos.x, player.pos.y)
	end
	-- player invul
	player_invul_time -= clock.delta
end

invul_spr_bl=false
function player_draw()
	-- draw player
	if player_invul_time > 0 then
		if invul_spr_bl then
			spr(player.sprite-1, player.pos.x, player.pos.y)
			invul_spr_bl = false
		else
			invul_spr_bl = true
		end
	else
		spr(player.sprite, player.pos.x, player.pos.y)
	end
	-- draw reticle
	dr_ret()
end
-- draw reticle
curr_ret_ang = 0
ret_ang = 0
function dr_ret()
	-- get correct perpendicular angle
	player.sht_dir = {x=0,y=0}
	if (player.dir == 0) then
		player.sht_dir.x = -1
	elseif player.dir == 1 then
		player.sht_dir.x = 1
	elseif player.dir == 2 then
		player.sht_dir.y = -1
	else 
		player.sht_dir.y = 1
	end
	-- lerp ret_ang
	curr_ret_ang = lerp(curr_ret_ang, ret_ang, 0.6)
	-- rotate vec 
	local final_ret_vec = rot_vec(player.sht_dir, curr_ret_ang)
	-- draw reticle
	spr(
		0,
		player.pos.x+(final_ret_vec.x*6),
		player.pos.y+(final_ret_vec.y*6)
	)
end

------------------ player damage
player_invul_time = 0
function player_damage()
	if player_invul_time < 0 then
		shake()
		sfx(8)
		player.health -= 1
		player_invul_time = 3
		if player.health == 0 then
			game_state = "over"
			music(-1)
			sfx(4)
		end
	end
end


------------------- bullet stuff
bullets={}
b_spd = 4
b_down_time = 0
b_rate = 1/5
b_curr_i = 1

-- on start create intial bullets
for i=1, 20 do
	bullets[#bullets+1]={
		pos={x=-9000, y=-9000},
		dir={x=0, y=0},
		active=false
	}
end

function create_bullet(_x, _y, _dir)
	-- get bullet
	local curr_b = bullets[b_curr_i]
	-- set bullet initial vars
	curr_b.active = true
	curr_b.pos = {x=_x, y=_y}
	curr_b.dir = _dir
	-- iterate bullet index
	b_curr_i = b_curr_i + 1
	if b_curr_i > #bullets then
		b_curr_i = 1
	end
end

function bullet_update()
	-- bullet downtime 
	b_down_time -= clock.delta
	-- bullet update
	for i=1, #bullets do
		local b = bullets[i]
		if b.active then
			-- movement
			b.pos.x += b.dir.x * b_spd;
			b.pos.y += b.dir.y * b_spd;
			--collision
			for ei=1, #enemies do
			 local e = enemies[ei]
			 if obj_collide(b, e)  and e.active then
			 	b_cull_i=i
			 end
			end		
		end
	end
end

function bullet_draw()
	for i=1, #bullets do
		local b = bullets[i]
		if b.active then
			spr(93, b.pos.x, b.pos.y)	
		end
	end
end


------- process bullet collision
b_cull_i=-1
function bullet_cull()
	if b_cull_i != -1 then
		bullets[b_cull_i].active = false
		b_cull_i = -1
	end
end

---------------------- power ups
power_ups = {}
----- create power ups
for i=1, 5 do
	power_ups[#power_ups+1] = {
		pos={x=0,y=0}, 
		p_type="",
		active=false,
		l_span=0
	}
end

-- power up functions
-- spawning vars
p_spn_rate = 10
p_spn_timer = p_spn_rate
p_spn_dist = 8*7
p_l_span = 13
function spn_p_ups_loop()
	if(game_state != "started") then return end
	-- iterate timer
	p_spn_timer -= clock.delta
	-- if is time then spawn
	if p_spn_timer < 0 then
		p_spn_timer = p_spn_rate
		for i=1, #power_ups do
			local p = power_ups[i]
			if p.active == false then
				--create pos
				local pos = get_spn_pos()
				-- choose type
				local _type = "health"
				if rnd() > 0.5 then _type ="bomb" end
				-- create power up
				p.pos = pos
				p.active = true
				p.p_type = _type
				p.l_span = p_l_span
				break
			end
		end
	end
end

p_up_colls = {}
function power_up_update()
	-- clear collbacks
	p_up_colls = {}
	-- spn power ups
	spn_p_ups_loop()
	-- main loop
	for i=1, #power_ups do
		local p = power_ups[i]
		if p.active then
			-- check collision
			if obj_collide(player, p) then
				p_up_colls[#p_up_colls+1] = p 
			end
			-- handle lifespan
			p.l_span -= clock.delta
			if p.l_span < 0 then p.active = false end
		end
	end
end


function power_up_draw()
	for i=1, #power_ups do
		local p = power_ups[i]
		if p.active then
			local s = 114 -- change correct sprite
			if p.p_type == "health" then
				s = 115 -- change correct sprite
			end
			spr(s, p.pos.x, p.pos.y)
		end
	end
end

function power_up_collbacks()
	for i=1, #p_up_colls do
		local p = p_up_colls[i]
		sfx(7)
		-- handle event
		if p.p_type == "health" then
			player.health += 1
			-- prevent too much health
			if player.health > 3 then player.health = 3 end
		else
			player.bombs += 1
			if player.bombs > 2 then player.bombs = 2 end
		end
		-- deactivate powerup
		p.active = false
	end
end





--------------------------- bomb
bomb = { -- only one bomb
 active=false,
 pos={x=0,y=0},
 lifespan=0
}
function create_bomb(_x, _y)
	if bomb.active == false and player.bombs > 0 then
		-- deplete one bomb
		player.bombs-=1
		-- create bomb
		bomb.pos.x = _x
		bomb.pos.y = _y
		bomb.active = true
		bomb.lifespan=1
	end
end
function bomb_update()
	-- just delay lifespan
	if bomb.active then
		bomb.lifespan -= clock.delta
		if bomb.lifespan < 0 then
			-- if lifespan runs out
			-- bomb boom
			bomb.active = false
			bomb_boom()
		end
	end
end
b_flash_colors={
	8,8,8,
	0,0,0,
	9,9,9,
	0,0,0,
	10,10,10,
	0,0,0
} 
curr_flash_index = 0
function bomb_draw()
	if(bomb.active) then
		spr(114, bomb.pos.x, bomb.pos.y)
	end
	if(curr_flash_index > 0) then
		curr_flash_index -= 1
		cls(b_flash_colors[#b_flash_colors-(curr_flash_index-1)])
	end
end
function bomb_boom()
	--tut hooks
	iter_tut_prompt(5)
	door_open()
	show_survive()
	--set bomb fx
	sfx(9)
	curr_flash_index = #b_flash_colors
	-- clear all enemies
	for i=1, #enemies do
		local e = enemies[i]
		if e.active then add_score(200) end
		e.active = false
	end
end



-------------------------- score
score = 00000

function add_score(_add)
	sfx(12)
 score+=_add
 --shake score
 score_off+=2
end

score_off=0
function score_update()
	score_off -= 0.2
	if(score_off < 0) then score_off = 0 end
end

function dr_score()
	local scr_string = pad(tostr(score), 6)
	print(
	 scr_string,
	 player.pos.x - 8*6 - 3 + rnd(score_off), 
	 player.pos.y - 8*6 + 4 + rnd(score_off)*1.3,
	 10
	)
	print(
	 scr_string,
	 player.pos.x - 8*6 - 3 + rnd(score_off), 
	 player.pos.y - 8*6 + 4 + rnd(score_off)*1.2,
	 9
	)
	print(
	 scr_string,
	 player.pos.x - 8*6 - 3 + rnd(score_off), 
	 player.pos.y - 8*6 + 4 + rnd(score_off),
	 8
	)
end

function pad(string,length)
  if (#string==length) return string
  return "0"..pad(string, length-1)
end



-->8
-- enemies
-- enemies has slow-tough and fast-weak types
enemies={}
enemy_spd= 20/100
enemy_spd_fast = enemy_spd*3
-- start enemy pool
function add_enemy_instance()
	enemies[#enemies+1]={
		--state
	 pos={x=0,y=0},
	 active=false,
	 health=3,
	 is_hit=false,
	 --props
	 sprite=64,
	 sprite_hit=65,
	 is_fast=false,
	 tut=false
	}
end
for i=1, 5 do
	add_enemy_instance()
end


function activate_enemies()
	-- activate one enemy if avail
	for i=1, #enemies do
		local e = enemies[i]
		if e.active != true then
			-- pick enemy type
			local _is_fast = true
			if rnd() > 0.3 then
			 _is_fast = false
			end
			-- create enemy position
			local pos = get_spn_pos()
			-- set enemy vars	
			e.pos = pos
			e.active = true
			e.health = 9
			e.sprite = 64
			e.tut = false
			-- create faster enemies
			if _is_fast then
				e.is_fast = true
				e.health = 3
				e.sprite = 72
			end
			break
		end
	end
end

function enemies_draw()
	for i=1, #enemies do
		local e = enemies[i]
		if e.active then
			local sprite = e.sprite
			if e.is_hit then sprite+=1 end
			spr(
				sprite,
				e.pos.x,
				e.pos.y
			)
		end
	end
end

enemy_spawn_rate=1
enemy_timer=enemy_spawn_rate
function enem_spawn_loop()
	if game_state != "started" then return end 
	--create enemies
	if enemy_timer < 0 then
		activate_enemies()
		-- reset timer
		enemy_timer = enemy_spawn_rate;
	end
	--iterate timer
	enemy_timer -= clock.delta
end

function enemy_update()
	-- spawn enemies
	enem_spawn_loop()
	-- main update loop for enems
	for i=1, #enemies do
		local e = enemies[i]
		if e.active then
			-- flag for collision
			for bi=1, #bullets do
				local b = bullets[bi]
				if b.active then
					if obj_collide(b, e) then
						enemy_colls[#enemy_colls+1] = i
					end
				end
			end
			-- skip for loop if tut
			if e.tut then goto continue end
			-- handle speed
			local e_spd = enemy_spd
			if e.is_fast then e_spd = enemy_spd_fast end
			-- reset hit sprite
			e.is_hit = false
			-- get direction
			local dir=norm_vec({
				x=player.pos.x-e.pos.x,
				y=player.pos.y-e.pos.y	
			})
			-- move in direction
			e.pos={
				x=e.pos.x+(dir.x*e_spd),
				y=e.pos.y+(dir.y*e_spd)
			}
			::continue:: -- this is marker to skip for loop
		end
	end
end

--------------- enemy collisions
enemy_colls={}
function enemy_coll_backs()
	-- for all enemies damage them
	for i=1, #enemy_colls do
		sfx(11)
		-- if health < 0 then die
		local e = enemies[enemy_colls[i]]
		-- set hit sprite
		e.is_hit = true		
		e.health-=1
		-- emit partices
		emit(e.pos.x, e.pos.y)
		--sfx
		sfx(5)
		-- handle death
		if e.health < 0 then
			e.active = false
			-- add score
			add_score(200)
		end
	end
	--reset flags
	enemy_colls={}
end

-->8
-- ui
function ui_player_health()
	for i=1, player.health do
		print(
			"♥",
			player.pos.x-(8*8)+4+(8*i),
			player.pos.y-(8*7)+4,
			8
		)
	end
end

function ui_player_bomb()
 for i=1, player.bombs do
		print(
		 "◆",
			player.pos.x+(8*8)+4-(8*i),
			player.pos.y-(8*7)+4,
			12
		)
	end
end




--------------- game over screen
function game_over_draw()
		cls(2)
		print(
			"game over",
			-- note this is not centered lmao
			player.pos.x-(8*1)-2,
			player.pos.y+(8*0),
			8
		)
				print(
			"score:",
			player.pos.x-(8*2),
			player.pos.y+(8*1),
			7
		)
		print(
			pad(tostr(score), 6),
			player.pos.x-(8*-1),
			player.pos.y+(8*1),
			7
		)
		print(
			"press start",
			player.pos.x-(8*1)-6,
			player.pos.y+(8*2),
			8
		)
end
-->8
--fx

----------screen shake
shake_ints=6
curr_shake=0
shake_offs={x=0, y=0}
function shake()
	curr_shake = shake_ints
end

function shake_update()
	--lerp the intensity
	curr_shake = lerp(curr_shake, 0, 0.1)
	--create offset
	shake_offs.x=(rnd()*curr_shake)-2
	shake_offs.y=(rnd()*curr_shake)-2
end




-----------------------particles
emitters={}
curr_em_i = 1
-- create emitters
for i=1, 20 do
	-- create emitter
	local e = {
		pos={x=0,y=0},
		active=false,
		lifespan=0,
		particles={},
		sprite=91
	}
	-- create particles
	for ep=1, 5 do
		local party = {
			pos={x=0, y=0},
			active=false,
			dir={x=0,y=0},
			vel=0
		}
		e.particles[#e.particles+1]=party
	end
	emitters[#emitters+1]=e
end

function emit(_x, _y)
	-- get available emitter
	local e = emitters[curr_em_i]
	-- set emitter position
	e.pos = {x=_x, y=_y}
	-- activate emitter 
	e.active = true
	e.lifespan = 0.2
	-- activate all particles
	for i=1, #e.particles do
		local p = e.particles[i]
		p.active = true
		p.pos = {x=0, y=0}
		p.vel = rnd()*5
		p.dir={
			x=(rnd()*2)-1,
			y=(rnd()*2)-1
		}
	end			
	--iterate emitter index
	curr_em_i += 1
	if curr_em_i > #emitters then curr_em_i = 1 end
end

function emitters_update()
	for i=1, #emitters do
		local e = emitters[i]
		if e.active then
			-- handle lifespan
			e.lifespan -= clock.delta
			if e.lifespan < 0 then e.active = false end
			for ep=1, #e.particles do
				local party = e.particles[ep] 
				-- lerp velocity to zero
				party.vel = lerp(party.vel,0,0.3)
				-- move particle
				party.pos.x += party.dir.x*party.vel
				party.pos.y += party.dir.y*party.vel
			end
		end
	end
end

function emitters_draw()
	for i=1, #emitters do
		local e = emitters[i]
		if e.active then
			for ep=1, #e.particles do
				local party = e.particles[ep]
				if party.active then
					spr(
						e.sprite,
						e.pos.x+party.pos.x,
						e.pos.y+party.pos.y
					)
				end 
			end
		end
	end
end

-->8
-- tutorial stuff
function tutorial_update()
	door_update()
	tut_p_up_update()
end

function tutorial_draw()
	door_draw()
	tut_p_up_draw()
	tut_prompts_draw()
	srv_prmp_update()
end


--------------------------- door
door = {
	thresh=44*8,
	forward_active=true,
	backward_active=false,
}
function door_update()
	-- prevent player from leaving
	if door.forward_active then
		if(player.pos.y < door.thresh) then
			player.pos.y = door.thresh
		end	
	end
	-- close door when player has extied
	if player.pos.y < 42*8 
					and door.forward_active == false 
					and door.backward_active == false
				then
		door_close()
		game_state = "started"
	end 
	-- prevent player from entering again
	if door.backward_active then
		if (player.pos.y > door.thresh-8*2) then
			player.pos.y = door.thresh-8*2
		end 
	end
end
function door_draw()
	if door.forward_active or door.backward_active then
		spr(59, 90*8, 43*8)
		spr(59, 91*8, 43*8)
	end
end
function door_open()
	sfx(10)
	door.forward_active = false
end 
function door_close()
	sfx(10)
	door.backward_active = true
end


------------------- tut power-up 
tut_p_up = {
	pos={x=90*8, y=50*8},
	active=true
}
function tut_p_up_update()
	if obj_collide(player, tut_p_up) and tut_p_up.active then 
		iter_tut_prompt(4)
		player.bombs += 1
		tut_p_up.active = false
		sfx(7)
	end
end
function tut_p_up_draw()
	if tut_p_up.active then
		spr(
			114,
			tut_p_up.pos.x,
			tut_p_up.pos.y
		)
	end
end


--------------- tutorial prompts

tut_prompts = {
	{"press ❎ to shoot"},
	{"press 🅾️ to switch","    directions"},
	{""},
	{"press ❎🅾️ ","together to super move"},
	{""}
}
tut_prompts_i = 1
function tut_prompts_draw()
	local arr=tut_prompts[tut_prompts_i]	
	for i=1, #arr do
		if(i == 1) then 
			print(arr[i], 87*8, 50*9)
		else
			print(arr[i], 87*8, 50*9+(8*(i-1)))
		end
	end
end
function iter_tut_prompt(val)
	if(val > tut_prompts_i) then
		tut_prompts_i = val
	end
end


--------------- tutorial enemies

function create_tut_enemies()
	-- create initial enemy
	local e1=enemies[1] 
	e1.tut = true
	e1.active = true
	e1.pos = {x=90*8, y=52*8}
	-- create caged enemies
	local e_tut_pos ={
		-- left cage
		{x=86*8, y=45*8},
		{x=86*8, y=46*8},
		{x=88*8, y=47*8},
		-- right cage		
		{x=94*8, y=47*8},
		--{x=95*8, y=46*8},
		--{x=96*8, y=46*8},
	}
	for i=1, #e_tut_pos do
		local pos = e_tut_pos[i]
		local e = enemies[i+1]
		e.pos = pos
		e.active = true
		e.tut = true
	end
end
create_tut_enemies()


----------------- survive prompt
srv_prmp_t = -1
function show_survive()
	srv_prmp_t = 4
end
function srv_prmp_update()
	if srv_prmp_t > 0 then
		srv_prmp_t -= clock.delta
		print("survive!!!", 89*8, 38*8)
	end 
end
__gfx__
00000000d66666656665d6650666d660055101500000000005510551010101110550055055000555050000009900099010100000011100000000000000000000
000000006d6dddd56d6566d66d5d6d1556d1056d00ddd0d050105010100010005dd15dd199505999995054502290222901001110100010100060006000d000d0
000000006dddddd5dd556d6d65dddd555dd105d10511110111001100100000005dd15dd199404999994049401290122210101110100010000656065605050505
000700006ddddd55ddd56ddd6ddddd15111101100511111010001000000010000111011144000444040004500000011100000110011101100d1d0d1d00100010
000000006dd5ddd5dd556ddddddddd55050050050511110105110511011101015515550500555000005500142009900001110000000010010000000000000000
0000000066ddddd5ddd566dd6dddd5155dd00550001111105010501010001000dd15dd150599950505995000121119021111101000000110060006000d000d00
000000006dddddd55d556dd561515151561056d1050101001100110000001000dd15dd1509999904099950401011120111111010101100006560656050505050
0000000055555550055055500010101001005dd1001010001000100010000000111011000044400000444000000000000111000000000110d1d0d1d001000100
aaaaaaaaaa9aaaaa49a9a9a94949494994449444010014416666666666666666666665665d5d0500050000000000000000100100010b0010300100b041400441
aaaaaaaaa949aaaa99949aaa999499444444a494144144446666666666666d666666d6d66d6056d050500d000050001000000000003b300110b00b3b19914994
aaaaaaaaaa9aaaa999a9a9a9494494994445994441004444665666666656d5d6656d666d65656d650010d050010100003001001000b3b00040b0034341444994
aaaaaaaaaaaaaaaaaa99949a4499444995594915001104416666666666665656d6d66666d5d56d650000501000000000010101010b3b3b0303b3004004114441
aaaaaaaaaaaaaaaa9a49a9a9499449444444a990014410006666666666666666d6d666560565d5d500d0100d000000000000000013b4b3003b4b300001441444
aaaaaaaaaaaaa9aa9494aa9a9494949944449449144441406666d66666d66666666666d6d66655500d0500050100050010003000014441001444103014994194
aaaaaaaaa9aaaaaa9949aa9949944949444594491444410466666666656566d666d66d6d66d65060500010010000101000101000001410310141013114994149
aaaaaaaaaaaaaaaaa99aa99444994499941945590144104066666666656566666d6d6666d6060656100010500000000001000001100400100040004041441094
bbbbbbbbb3bb03bb03b3000003000b000000030000100000cccccccccc4cccccb44cc4cc4444c444444444444444444405544454000000100000000000000000
bbbbbbbb3bbb3bbb3bb3033003b330000013000000000000ccccccccccc4cccb4444c4c344444444444444444444445454404444010040000000000000000000
bbbbbbbb0bbbbbbb0bbb3bb30b3b00030131000300010010cccccccccccbcccc4444cc4cb4444434444444444444444444445004000000040000000000000000
bb3bbbbbb33bbbb30334bb3003b303000310030000010001cccccccccccbcc4cc44cbccc44444444444444445444444444454445504005010000000000000000
bbbbbbbbbbbbbbbb3bb333b30000000b0000000101000000cccccccc4cccc4ccccc44ccc44444444444444444444444441444444041400000000000000000000
bbbbbbbbbbbbbbbb3bb3bbbbb0303b030010010310000000ccccccccccccc4cc44c4444b444444cc444444444444444454455540000000500000000000000000
bbbbbbbbbb3bbbb33b3b3bb33000b3033000100000000100cccccccccbcccbccc4cc44cc44434444444444444444544444044414005004000000000000000000
bbbb3bbb03bbbb3043033b34030330300303000000000100cccccccccbccccccbcc3ccc444444444444444444444444444444445040100000000000000000000
44445444144444410111111100000000444044401040404011001010001000100000000000000000144444411040404000000000000000000000000000000000
44444444000000000011111100100010444144414140104111011010100010000000000000000000000000004140104100000000000000000000000000000000
44441444444441440000000000000000444144414141404111011010001000100000000000000000444441444141404100000000000000000000000000000000
01110110000000001111101110001000444144414041404111011010100010000000000000000000000000004041404100000000000000000000000000000000
14444444414444441111001100000000444114504041414000011010001000100000000000000000414444444041414000000000000000000000000000000000
44444444000000000000000000100010444144414041411011011010100010000000000000000000000000004041411000000000000000000000000000000000
54444444444114441111111100000000444144414140414011011010001000100000000000000000444114444140414000000000000000000000000000000000
01111111000000000000000010001000541144404010404011000010100010000000000000000000000000004010404000000000000000000000000000000000
00066600000000000000000000444000a009d100000a0b00000450000004500000077070000009400099499000000000000000000000000000000000006d5100
0065556000666000000000000409040000a2221000f4b000000f9000000f90000006d060070094000004a4000000000000000000000000000000000007000010
005000500655560000000000049094000f2424219944490000edd20000bdd300006d50600a094400000494500000000000000000000000000000000060000001
0009090005000504000000000090900000909090040904000e8dd2000b3dd300065dd6550900ff100000555d00000000000000000000000000000000d0000005
04666660069096400000000004d4d400a0098900009890004e46665543466655065dd140090022100506dd5d000000000000000000000000000000005000000d
402ddd2042ddd2000000000004656400900d22100b333b0000f8229000f333900455500004f22f210590d5590000000000000000000000000000000010000006
004ddd4000dd6040000000000955590049d29d2009b3b9000020200000b0300000505000040d22d1050060500000000000000000000000000000000001000070
0006060006000000000000000010100040d22d2100404000080020000b003000004040000401222105006060000000000000000000000000000000000015d600
15d561655555555501d15d1007ffff100077710000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccc6c
15d5656566666666156666517f0151f10766651000000000000000000000000000000000000000000000000000000000000000000004400000000000cc77cccc
1565657515555555d655d56d6f5606f57671765100000000000000000000000000000000000000000000000000009000000000000049940000000000c6cc6ccc
15d565656666666666d0056d5f0565f1661516610000000000000000000000000000000000000000000000000099a000000000000497a9400014d9906cccc6cc
15d1656555551555d6500d666f5606f5766d66510000000000000000000000000000000000000000000000000009990000000000049aa940114daa78cc6ccccc
15d57565ddddddd6d65d556d5f0565f1666d66110000000000000000000000000000000000000000000000000009000000000000004994000014d980ccccc77c
15d575655555555515666651fdffffdf7667665100000000000000000000000000000000000000000000000000000000000000000004400000000000c7cc6cc6
01d565651111111001dd6d100111111015555510000000000000000000000000000000000000000000000000000000000000000000000000000000006c6ccccc
a999999a0a997a900a999990949499aa00000a000a00000000999900282828281988889200000000000000000000000000000000000000000000000000000000
94444449a1555519a1555559d545d5d5000009000900000009dddd9099999999d988889800000000000000000000000000000000000000000000000000000000
9494949a9544445a9114a4496545656509444900094449000d555540888888881988889200000000000000000000000000000000000000000000000000000000
5555555549a799a55999ad956545656504555900065554000d54544088888888d988889800000000000000000000000000000000000000000000000000000000
a4444445454545454555915499aa999409445d00065444000d545440888888881988889200000000000000000000000000000000000000000000000000000000
94949494454545455449144545d2d15104dddd000645590006dddd4099999999d988889800000000000000000000000000000000000000000000000000000000
49999994154545411559155145686d5d05666d000ddddd0004500540d1d1d1d11988889200000000000000000000000000000000000000000000000000000000
94444449011111100119111045686d5d06000600060006000600006010101010d988889800000000000000000000000000000000000000000000000000000000
00d0a0d00019910000078000022002200a9999a00a9999a009444440000aa10000000000000000000000000011111111000000000000000000000000aaaacccc
0d00a0000497a940006e280027822e82a444444a494444909dfffff800a99a1000000000000000000000000011111111000000000000000000000000a0aa0c0c
5d09790d197a4a9106ee22802e8888829a9999a949455490466666800a9119a100000000000000000000000011111111000000000000000000000000a0aa0c0c
0509790049a4aa947eee222e18882821a444444a494444904fffff800a91094100000000000000000000000011111111000000000000000000000000aaaacccc
5d00900549a9aa94e888111802828220555555554a9999a04666685000a99a1000000000000000000000000011111111000000000000000000000000b0bb0808
05d020d019aa97910e8811800128221074707447915585104ffff8d0000a910000000000000000000000000011111111000000000000000000000000bb0b8008
005020d0049a794000e8180000122100656665569566e6d09d668d6000a9410000000000000000000000000011111111000000000000000000000000b00b8808
0000200000199100000e2000000110005d4d4dd50944e4900944445000a9400000000000000000000000000011111111000000000000000000000000bbbb8888
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000705030360703
03a3a323236633000000d0c0c0b3b3c0c0c0d0000000735353535353536373000000525251515152520000000000000000006305737070505010500000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005010363636
363606a32333000000d0c05151b3b3515151c0d000000073232353532373000000525251f1f1f151525200000000000000006305737350500710500000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005010101030
30304040303030301010309292b3b392929251c0d0000000737353537300000052525151313121f1f15252101010303030303030303010101010500000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050505050
50505050505050505050308282b3b38282925151c0d000000000535300005252525151412121214141f152105050505050505050505050505050000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007070707050307272b3b3628282925151c0d000000063530000525251514121111111112141f1305070707070000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000070707050308262b3b362728282925151c007000063630000525151412111010101011141f1305070707000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000707050308262b3a3a3a3a3a3a3a3a3a3a3232363630000525251412111010101111141f1305070700000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000705030826213a3a3a3a3a3a3a3a3a3a3a32363630000005252514121110111111131f1305070000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000005030726262626262627282829251070000636300000700525251412111112131f1f1305070000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000050308282726262627272828292e0257070636370702500005252514121213141f1e0305000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000050303030303030303030303030303025076363072530303030303030303030303030305000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000505050505050505050302515151515156363151515151525305050505050505050500000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000007070707050300500000000536363530000700705305070707000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000070707050300500000000536363530000007005305070700000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000707050300500700000536363530000000005305070000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000007050300570077000536363530000000005305000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000050302513131313136363131313131325400000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300507506070000000007060500705300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300550607000000000000070605005300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000400560700000000000000000706005300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300570000000000000000000007005300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000400500000000000000000000000005300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300536000000007070000000003605400000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000250536000000706060700000003625300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300536000070600707607000003605300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300536000000706060700000003605305000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000400500000000007070000000000005305000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000400570000000000000000000007005300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300560700000000000000000706005300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300550607000000000000070605005300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000300507506070000000007060500705300000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000253015151515151515151515151530250000000000000000000000000000000000000000000000000000000000
__gff__
0001010101000000000000000000000000000000000000000000000000010100000000000000010101000000000000000001000000010000000000000000000002000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000303030303030303030303030000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000370161616181818161670030000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000316161618191919181616030000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003181819191a1a1a191818030000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000319191a1a1c1c1c1a1919030000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007031a1a0000001c00001a1a030700000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007031d000000001c00001e1d030700000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006031a000000001c0000001e030600000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070603191a0000001c0000001a030607000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000706050317191a00001c0000001a030506070000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000706050503191a00001c1c00001a19030505060700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000706050505031a0000001c00001a1917030505050607000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005050505050505050505031d0000001c0000001a19030505050505050505050505050000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000503030303040403030303041e0000001c000000001a040303030303030303030303030500000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005031c1c2424241c1b1c1c1c00001b001c001b0000001d1e1e152928272728282828030507000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005031c24241e1d1e1c1c1c1b001b541b1c1b541b00000025152c2928282727282828030507000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070504241e1e1e1e241c1b1b0000001b001c001b000000250d152c2929282626272728030507070000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007070504241e1e1e1e1b1c0000001b0000001c0000001b000025152c2c29282726262628030507070700000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007070705041c241d1e1b1b0000001b541b00001c00001b541b00000d152c2c292827262627010507070707070000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070707070705031c241b1b1b00000000001b0000001c0000001b000000000d152c2c2928272827010505050505050505050505050505000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000505050505050505050505050505031c1c1b1b000000000000000000001c00000000000000002525152c2c29292929010101030303030303030101010101050000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050303030301030304040404030303031c1b00000000001b0000000000001c0000000000001b0000000d0d152c2c2c2c150d00000000003650373705057001050000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005036363636363603a3233000000001b0000000000001b541b00000000001c00000000001b541b0000001e0d151515150d0000000000003650370707050501050000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000503637030303a3a3232663300000000000000000000001b000000003737373737370000001b0000000000000d0c0c0d000000323232323650370707070501050000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000705036330303a3a3232326832330000000000000000000000000000373232323232323700000000000000000000252500000036525151515152370707070703050000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007050363303a3a323232326832323300000000373737373737373737363535353535353637000000000000000000000000000036503737373737070707070703050000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007070503633a3a323232323268323232330000373232323232323a3a3a3a3534343434353637373737373737373737373737373736503707070707070707070703050000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007070504633a656767676767676767643233003736323232323a3a3a3a3a3470343470343a3a3a3a3a3a3a32323232323232323236506767676767676767645403050000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007070504633a3a32323232326832323233000037363637373737373737363465343464343a3a3a3a3a3a3a3a323232323232323236503737373737070707070703050000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000707050463303a3a3232323268323233000000373b3600000000000037363470343470343637373737373737373737373737373736525151515152370707070701050000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000705036330303a3a32323268323300000000703b3b70000000000037363534343434353637000000000025252500000000000000323232323650370707070501050000000000
__sfx__
000f011f210151f0151f0151f0151f0151e0151c0151a0151901519015190151901519015190151b0151c0151d0151e01520015210152101521015200151e0151d0151c0151c0151c0151e0151f0152101521015
011000001f0552005521055220552305525055280552805526055230552205521055210552105521055200552205523055230552605528055290552b0552a0552a05529055270552605522055220552205522055
0110011e0505505055050550505505055050550505507055090550b0550c0550a0550805507055070550705507055080550b0550c0550a0550805507055070550605506055050550505505055050550505505055
0110011f1475014750147501475217752147501775018750147501775014750177521475214750147501775014750147501475018750147501b750147511b7511475017750147501875014750187501475014750
001001200261003610036100261002610026100361003610026100261002610026100261002610026100261002610036100361003610036100361003610036100361003610046100461004610046100561004610
00040000085531055324553245531f5530c5530155300553006030060300603006030060300603006030060300603016030060301603026030360300003000030000300003000030000300003000030000300003
00040000026100b610196202a630276200d6100461001610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00080000000042c062330643306733065320043100431004310040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004
0004000024640382511d2411123104211022110010001200002000000000100001000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00030000246502c6502a650206501b6501965018650116500d6501a65023650216501c650176500b65007650086500c6500d6500e650056500665009650086500665006650066500565005650066500765007650
000100000763007630076300c73006630066400665012650136501976013660177601366013660056500b75004650046500d7400464004630046300562005620066200671007610026100161001610016000b610
000400001032007630056200362002620003000430005300003000000000000115000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00020000182301a2301a230112200c2200c2200e22013210192102121022250212502030021300223002530000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
02 01020304
00 01020344
00 05064344
00 07424344
00 08424344
00 48424344

